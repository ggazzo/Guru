/* Generated By:JavaCC: Do not edit this line. GuruCParser.java */
package com.guru.language;
import java.util.*;
import com.guru.generator.*;

  public class GuruCParser implements GuruCParserConstants {

    private static Classes classes = new Classes();

    // Hastable for storing typedef types
    private static Set types = new HashSet();

    // Stack for determining when the parser 
    // is parsing a typdef definition.
    private static Stack typedefParsingStack = new Stack();

    // Returns true if the given string is
    // a typedef type.
    private static boolean isType(String type){
          return types.contains(type);
    }

    // Add a typedef type to those already defined
    private static void addType(String type){
          types.add(type);
    }

    // Prints out all the types used in parsing the c source
    private static void printTypes(){
      for (Iterator i = types.iterator(); i.hasNext();) {
        System.out.println(i.next());
      }
    }

    // Run the parser
    public static void main ( String args [ ] ) {
      GuruCParser parser = null;

          // Hack to include type "special types"
            types.add("__signed__");
            types.add("__const");
            types.add("__inline__");
            types.add("__signed");

      if(args.length == 0){
        System.out.println("Guru Parser .1:  Reading from standard input . . .");
        parser = new GuruCParser(System.in);
      }
      else if(args.length == 1){
        System.out.println("Guru Parser .1:  Reading from file " + args[0] + " . . ." );
      try {
        if(parser!= null && parser.jj_initialized_once)
        {
          parser.ReInit(new java.io.FileInputStream(args[0]));
        }else
        {
                parser = new GuruCParser(new java.io.FileInputStream(args[0]));
      }
      }
      catch(java.io.FileNotFoundException e){
        System.out.println("C Parser Version 0.1:  File " + args[0] + " not found.");
        return ;
        }
      }
      else {
        System.out.println("Guru Parser .1:  Usage is one of:");
        System.out.println("         java CParser < inputfile");
        System.out.println("OR");
        System.out.println("         java CParser inputfile");
        return ;
      }
      try {
        parser.TranslationUnit();
        //System.out.println("Guru Parser .1:  Java program parsed successfully.");
        classes.build();
      }
      catch(ParseException e){
        System.out.println("Guru Parser .1:  Encountered errors during parse.");
        e.printStackTrace();
      }
    }

  static final public void TranslationUnit() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      ClassDeclaration();
    }
  }

  static final public void ClassDeclaration() throws ParseException {
                           Token t;
    t = jj_consume_token(IDENTIFIER);
          classes.addClass(t.toString());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      t = jj_consume_token(IDENTIFIER);
                                      classes.get().addExtends(t.toString());
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 66:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(66);
        t = jj_consume_token(IDENTIFIER);
                                                                                                     classes.get().addExtends(t.toString());
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case USE:
      jj_consume_token(USE);
      t = jj_consume_token(IDENTIFIER);
                                                                                                                                                                              classes.get().addInclude(t.toString());
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 66:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(66);
        t = jj_consume_token(IDENTIFIER);
                                                                                                                                                                                                                                             classes.get().addInclude(t.toString());
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    ClassMembers();
  }

  static final public void ClassMembers() throws ParseException {
    jj_consume_token(67);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE:
      case FLOAT:
      case LONG:
      case CHAR:
      case INT:
      case VISIBILITY:
      case IDENTIFIER:
      case 67:
      case 69:
      case 70:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      MemberDeclaration();
    }
    jj_consume_token(68);
  }

  static final public void MemberDeclaration() throws ParseException {
                            String s;
    if (jj_2_1(4)) {
      construtores();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 69:
        destrutores();
        break;
      default:
        jj_la1[6] = jj_gen;
        if (jj_2_2(4)) {
          attributos();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOUBLE:
          case FLOAT:
          case LONG:
          case CHAR:
          case INT:
          case VISIBILITY:
          case IDENTIFIER:
            metodos();
            break;
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

  static final public void destrutores() throws ParseException {
                    String s;
    jj_consume_token(69);
    s = CompoundStatement();
        classes.get().createDestructor();
        classes.get().destructMethod.addStatement(s);
  }

  static final public void construtores() throws ParseException {
                     String params,s;Token t= null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VISIBILITY:
      t = jj_consume_token(VISIBILITY);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    if (jj_2_3(2)) {
    classes.get().addConstructor(t!= null?t.toString():"");
      s = CompoundStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 70:
        jj_consume_token(70);
        params = Parametros();
        jj_consume_token(71);
    classes.get().addConstructor(params,t!= null?t.toString():"");
        s = CompoundStatement();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  classes.get().addStatement(s);
  }

  static final public void metodos() throws ParseException {
    if (jj_2_4(2147483647)) {
      metodos_com_parametros();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE:
      case FLOAT:
      case LONG:
      case CHAR:
      case INT:
      case VISIBILITY:
      case IDENTIFIER:
        metodos_sem_parametros();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void metodos_com_parametros() throws ParseException {
                               Token t,t2,v= null;String params,s,s1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VISIBILITY:
      v = jj_consume_token(VISIBILITY);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    if (jj_2_5(2)) {
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(70);
      params = Parametros();
      jj_consume_token(71);
        classes.get().addMethodWithParams(t.toString(), params,v!= null?v.toString():"");
      s = CompoundStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE:
      case FLOAT:
      case LONG:
      case CHAR:
      case INT:
      case IDENTIFIER:
        s1 = Type();
        t2 = jj_consume_token(IDENTIFIER);
        jj_consume_token(70);
        params = Parametros();
        jj_consume_token(71);
  classes.get().addMethod(t2.toString(),params,s1,v!= null?v.toString():"");
        s = CompoundStatement();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  classes.get().addStatement(s);
  }

  static final public void metodos_sem_parametros() throws ParseException {
                               Token t,t2,v=null;String s,s1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VISIBILITY:
      v = jj_consume_token(VISIBILITY);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    if (jj_2_6(2)) {
      t = jj_consume_token(IDENTIFIER);
  classes.get().addMethod(t.toString(),v!= null?v.toString():"");
      s = CompoundStatement();
  classes.get().addStatement(s);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE:
      case FLOAT:
      case LONG:
      case CHAR:
      case INT:
      case IDENTIFIER:
        s1 = Type();
        t2 = jj_consume_token(IDENTIFIER);
  classes.get().addMethodWithReturn(t2.toString(),s1,v!= null?v.toString():"");
        s = CompoundStatement();
  classes.get().addStatement(s);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public String CompoundStatement() throws ParseException {
                              String retorno="",s;
    jj_consume_token(67);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case CONTINUE:
      case DOUBLE:
      case SWITCH:
      case RETURN:
      case WHILE:
      case FLOAT:
      case IF:
      case LONG:
      case CHAR:
      case FOR:
      case INT:
      case NEW:
      case DELETE:
      case DO:
      case IDENTIFIER:
      case 69:
      case 70:
      case 92:
      case 104:
      case 105:
      case 109:
      case 110:
      case 111:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_5;
      }
      s = Statement();
                        retorno += s;
    }
    jj_consume_token(68);
          {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public String Statement() throws ParseException {
                      String retorno = "",tmp="";Token t,t1=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
      t = jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case NEW:
      case IDENTIFIER:
      case 69:
      case 70:
      case 92:
      case 104:
      case 105:
      case 109:
      case 110:
      case 111:
        tmp = Expression();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(72);
                                             retorno = t.toString() +" " +tmp+";\u005cn";
      break;
    default:
      jj_la1[20] = jj_gen;
      if (jj_2_8(2)) {
        retorno = Expression();
        jj_consume_token(72);
          retorno += ";\u005cn";
      } else if (jj_2_9(2)) {
        Type();
        Variable();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 73:
          jj_consume_token(73);
          Expression();
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        label_6:
        while (true) {
          if (jj_2_7(2)) {
            ;
          } else {
            break label_6;
          }
          jj_consume_token(66);
          Variable();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 73:
            jj_consume_token(73);
            Expression();
            break;
          default:
            jj_la1[18] = jj_gen;
            ;
          }
        }
        jj_consume_token(72);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          retorno = Variable();
          jj_consume_token(73);
          retorno += " = ";
          tmp = Expression();
          retorno += tmp +";\u005cn";
          jj_consume_token(72);
          break;
        case SWITCH:
        case IF:
          retorno = SelectionStatement();
          break;
        case WHILE:
        case FOR:
        case DO:
          retorno = IterationStatement();
          break;
        case CONTINUE:
          t = jj_consume_token(CONTINUE);
          jj_consume_token(72);
                            retorno = t.toString()+";\u005cn";
          break;
        case DELETE:
          t = jj_consume_token(DELETE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 74:
            t1 = jj_consume_token(74);
            break;
          default:
            jj_la1[19] = jj_gen;
            ;
          }
          tmp = Variable();
          jj_consume_token(72);
                                                       retorno = t.toString()+" "+(t1== null?"":t1.toString()+" ")+tmp+";\u005cn";
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public String SelectionStatement() throws ParseException {
                               Token t;String retorno="",s="",exp="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      t = jj_consume_token(IF);
      jj_consume_token(70);
      exp = Expression();
      jj_consume_token(71);
      s = CompoundStatement();
                  retorno = t.toString() + "("+exp+")"+ "{\u005cn"+s+"\u005cn}\u005cn";
      label_7:
      while (true) {
        if (jj_2_10(2)) {
          ;
        } else {
          break label_7;
        }
        t = jj_consume_token(ELSEIF);
        jj_consume_token(70);
        exp = Expression();
        jj_consume_token(71);
        s = CompoundStatement();
                  retorno += t.toString() + "("+exp+")"+ "{\u005cn"+s+"\u005cn}\u005cn";
      }
      if (jj_2_11(2)) {
        t = jj_consume_token(ELSE);
        s = CompoundStatement();
                                retorno += t.toString() + "{\u005cn"+s+"\u005cn}\u005cn";
      } else {
        ;
      }
      break;
    case SWITCH:
      t = jj_consume_token(SWITCH);
      jj_consume_token(70);
      exp = Expression();
      jj_consume_token(71);
      s = CompoundStatement();
                  retorno = t.toString() + "("+"){"+s+"}\u005cn";
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public String IterationStatement() throws ParseException {
                               String retorno="",s="",exp="",tmp="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(70);
      exp = Expression();
      jj_consume_token(71);
      tmp = CompoundStatement();
            retorno = "while ( %exp% ){\u005cn%statments%\u005cn}\u005cn".replace("%exp%",exp).replace("%statments%",tmp);
      break;
    case DO:
      jj_consume_token(DO);
      tmp = CompoundStatement();
      jj_consume_token(WHILE);
      jj_consume_token(70);
      exp = Expression();
      jj_consume_token(71);
      EndOfStatement();
            retorno = " do{\u005cn%statments%\u005cn}while( %exp% );\u005cn".replace("%exp%",exp).replace("%statments%",tmp);
      break;
    case FOR:
      jj_consume_token(FOR);
      jj_consume_token(70);
      Expression();
      jj_consume_token(72);
      Expression();
      jj_consume_token(72);
      Expression();
      jj_consume_token(71);
      CompoundStatement();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public void EndOfStatement() throws ParseException {
    jj_consume_token(72);
  }

  static final public String Expression() throws ParseException {
                       String retorno;
    retorno = LogicalTextOrExpression();
           {if (true) return retorno.trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String LogicalTextOrExpression() throws ParseException {
                                   String tmp1="",tmp2="",tmp3="";Token t= null;
    tmp1 = LogicalTextXorExpression();
    if (jj_2_12(2)) {
      t = jj_consume_token(OR);
      tmp3 = LogicalTextOrExpression();
                                                                                               tmp2= t.toString();
    } else {
      ;
    }
      {if (true) return "%exp1% %con% %exp2%".replace("%exp1%",tmp1).replace("%con%",tmp2).replace("%exp2%",tmp3).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String LogicalTextXorExpression() throws ParseException {
                                     String tmp1="",tmp2="",tmp3="";Token t= null;
    tmp1 = LogicalTextAndExpression();
    if (jj_2_13(2)) {
      t = jj_consume_token(XOR);
      tmp3 = LogicalTextXorExpression();
                                                                                                  tmp2= t.toString();
    } else {
      ;
    }
      {if (true) return "%exp1% %con% %exp2%".replace("%exp1%",tmp1).replace("%con%",tmp2).replace("%exp2%",tmp3).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String LogicalTextAndExpression() throws ParseException {
                                     String tmp1="",tmp2="",tmp3="";Token t= null;
    tmp1 = AssignmentExpression();
    if (jj_2_14(2)) {
      t = jj_consume_token(AND);
      LogicalTextAndExpression();
                                                                                        tmp2= t.toString();
    } else {
      ;
    }
      {if (true) return "%exp1% %con% %exp2%".replace("%exp1%",tmp1).replace("%con%",tmp2).replace("%exp2%",tmp3).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String AssignmentExpression() throws ParseException {
                                 String tmp1="",tmp2="",tmp3="";Token t= null;
    tmp1 = ConditionalExpression();
    if (jj_2_15(2)) {
      tmp2 = AssignmentOperator();
      tmp3 = Expression();
    } else {
      ;
    }
      {if (true) return "%exp1% %exp2% %exp3%".replace("%exp1%",tmp1).replace("%exp2%",tmp2).replace("%exp3%",tmp3).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String AssignmentOperator() throws ParseException {
                               Token r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 73:
      r = jj_consume_token(73);
      break;
    case 75:
      r = jj_consume_token(75);
      break;
    case 76:
      r = jj_consume_token(76);
      break;
    case 77:
      r = jj_consume_token(77);
      break;
    case 78:
      r = jj_consume_token(78);
      break;
    case 79:
      r = jj_consume_token(79);
      break;
    case 80:
      r = jj_consume_token(80);
      break;
    case 81:
      r = jj_consume_token(81);
      break;
    case 82:
      r = jj_consume_token(82);
      break;
    case 83:
      r = jj_consume_token(83);
      break;
    case 84:
      r = jj_consume_token(84);
      break;
    case 85:
      r = jj_consume_token(85);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return r.toString();}
    throw new Error("Missing return statement in function");
  }

  static final public String ConditionalExpression() throws ParseException {
                                  String tmp1="",tmp2="",tmp3="";Token t= null;
    tmp1 = Logical_Or_Expression();
    if (jj_2_16(2)) {
      t = jj_consume_token(86);
      tmp2 = Expression();
      jj_consume_token(87);
      tmp3 = Expression();
    } else {
      ;
    }
        if (t!=null)
            {if (true) return "%exp1% %token% %exp2% : %exp3%".replace("%exp1%",tmp1).replace("%token%",t!=null?t.toString():"").replace("%exp2%",tmp2).replace("%exp3%",tmp3).trim();}
        else
            {if (true) return "%exp1%".replace("%exp1%",tmp1).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String Logical_Or_Expression() throws ParseException {
                                  String tmp1="",tmp3="";Token tmp2=null;
    tmp1 = Logical_And_Expression();
    if (jj_2_17(2)) {
      tmp2 = jj_consume_token(88);
      tmp3 = Logical_Or_Expression();
    } else {
      ;
    }
      {if (true) return "%exp1% %exp2% %exp3%".replace("%exp1%",tmp1).replace("%exp2%",tmp2!=null?tmp2.toString():"").replace("%exp3%",tmp3).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String Logical_And_Expression() throws ParseException {
                                   String tmp1="",tmp3="";Token tmp2=null;
    tmp1 = BitwiseOrExpression();
    if (jj_2_18(2)) {
      tmp2 = jj_consume_token(89);
      tmp3 = Logical_And_Expression();
    } else {
      ;
    }
      {if (true) return "%exp1% %exp2% %exp3%".replace("%exp1%",tmp1).replace("%exp2%",tmp2!=null?tmp2.toString():"").replace("%exp3%",tmp3).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String BitwiseOrExpression() throws ParseException {
                                 String tmp1="",tmp3="";Token tmp2=null;
    tmp1 = BitwiseXorExpression();
    if (jj_2_19(2)) {
      tmp2 = jj_consume_token(90);
      tmp3 = BitwiseOrExpression();
    } else {
      ;
    }
      {if (true) return "%exp1% %exp2% %exp3%".replace("%exp1%",tmp1).replace("%exp2%",tmp2!=null?tmp2.toString():"").replace("%exp3%",tmp3).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String BitwiseXorExpression() throws ParseException {
                                 String tmp1="",tmp3="";Token tmp2=null;
    tmp1 = BitwiseAndExpression();
    if (jj_2_20(2)) {
      tmp2 = jj_consume_token(91);
      tmp3 = BitwiseXorExpression();
    } else {
      ;
    }
      {if (true) return "%exp1% %exp2% %exp3%".replace("%exp1%",tmp1).replace("%exp2%",tmp2!=null?tmp2.toString():"").replace("%exp3%",tmp3).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String BitwiseAndExpression() throws ParseException {
                                 String tmp1="",tmp3="";Token tmp2=null;
    tmp1 = EqualityExpression();
    if (jj_2_21(2)) {
      tmp2 = jj_consume_token(92);
      tmp3 = BitwiseAndExpression();
    } else {
      ;
    }
      {if (true) return "%exp1% %exp2% %exp3%".replace("%exp1%",tmp1).replace("%exp2%",tmp2!=null?tmp2.toString():"").replace("%exp3%",tmp3).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String EqualityExpression() throws ParseException {
                               String tmp1="",tmp3="";Token tmp2=null;
    tmp1 = RelationalExpression();
    if (jj_2_22(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
        tmp2 = jj_consume_token(93);
        break;
      case 94:
        tmp2 = jj_consume_token(94);
        break;
      case 95:
        tmp2 = jj_consume_token(95);
        break;
      case 96:
        tmp2 = jj_consume_token(96);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tmp3 = EqualityExpression();
    } else {
      ;
    }
      {if (true) return "%exp1% %exp2% %exp3%".replace("%exp1%",tmp1).replace("%exp2%",tmp2!=null?tmp2.toString():"").replace("%exp3%",tmp3).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String RelationalExpression() throws ParseException {
                                 String tmp1="",tmp3="";Token tmp2=null;
    tmp1 = ShiftExpression();
    if (jj_2_23(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 97:
        tmp2 = jj_consume_token(97);
        break;
      case 98:
        tmp2 = jj_consume_token(98);
        break;
      case 99:
        tmp2 = jj_consume_token(99);
        break;
      case 100:
        tmp2 = jj_consume_token(100);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tmp3 = RelationalExpression();
    } else {
      ;
    }
      {if (true) return "%exp1% %exp2% %exp3%".replace("%exp1%",tmp1).replace("%exp2%",tmp2!=null?tmp2.toString():"").replace("%exp3%",tmp3).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String ShiftExpression() throws ParseException {
                            String tmp1="",tmp3="";Token tmp2=null;
    tmp1 = AdditiveExpression();
    if (jj_2_24(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 101:
        tmp2 = jj_consume_token(101);
        break;
      case 102:
        tmp2 = jj_consume_token(102);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tmp3 = ShiftExpression();
    } else {
      ;
    }
      {if (true) return "%exp1% %exp2% %exp3%".replace("%exp1%",tmp1).replace("%exp2%",tmp2!=null?tmp2.toString():"").replace("%exp3%",tmp3).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String AdditiveExpression() throws ParseException {
                               String tmp1="",tmp3="";Token tmp2=null;
    tmp1 = MultiplicativeExpression();
    if (jj_2_25(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 103:
        tmp2 = jj_consume_token(103);
        break;
      case 104:
        tmp2 = jj_consume_token(104);
        break;
      case 105:
        tmp2 = jj_consume_token(105);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tmp3 = AdditiveExpression();
    } else {
      ;
    }
      {if (true) return "%exp1% %exp2% %exp3%".replace("%exp1%",tmp1).replace("%exp2%",tmp2!=null?tmp2.toString():"").replace("%exp3%",tmp3).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String MultiplicativeExpression() throws ParseException {
                                     String tmp1="",tmp3="";Token tmp2=null;
    tmp1 = CastExpression();
    if (jj_2_26(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        tmp2 = jj_consume_token(106);
        break;
      case 107:
        tmp2 = jj_consume_token(107);
        break;
      case 108:
        tmp2 = jj_consume_token(108);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tmp3 = MultiplicativeExpression();
    } else {
      ;
    }
      {if (true) return "%exp1% %exp2% %exp3%".replace("%exp1%",tmp1).replace("%exp2%",tmp2!=null?tmp2.toString():"").replace("%exp3%",tmp3).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String CastExpression() throws ParseException {
                           Token t1=null, t2=null; String tmp1="";
    if (jj_2_27(2147483647)) {
      jj_consume_token(70);
      t2 = jj_consume_token(IDENTIFIER);
      jj_consume_token(71);
    } else {
      ;
    }
    tmp1 = UnaryExpression();
        if(t1==null)
        {if (true) return "%exp3%".replace("%exp3%",tmp1).trim();}
        else
        {if (true) return "(%exp1%) (%exp2%) %exp3%".replace("%exp1%",t1!=null?t1.toString():"").replace("%exp2%",t2!=null?t2.toString():"").replace("%exp3%",tmp1).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String UnaryExpression() throws ParseException {
                            Token t1, t2; String tmp1="",tmp2;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 69:
      case 92:
      case 104:
      case 109:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 92:
        t1 = jj_consume_token(92);
        break;
      case 104:
        t1 = jj_consume_token(104);
        break;
      case 69:
        t1 = jj_consume_token(69);
        break;
      case 109:
        t1 = jj_consume_token(109);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                  tmp1+=t1.toString();
    }
    tmp2 = PrefixIncDecExpression();
      {if (true) return "%exp1% %exp2%".replace("%exp1%",tmp1.toString()).replace("%exp2%",tmp2).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String PrefixIncDecExpression() throws ParseException {
                                   Token t1;String tmp1 = "", tmp2="";
    label_9:
    while (true) {
      if (jj_2_28(3)) {
        ;
      } else {
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 110:
        t1 = jj_consume_token(110);
        break;
      case 111:
        t1 = jj_consume_token(111);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                           tmp1+=t1.toString();
    }
    tmp2 = PostfixIncDecExpression();
      {if (true) return "%exp1% %exp2%".replace("%exp1%",tmp1).replace("%exp2%",tmp2).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String PostfixIncDecExpression() throws ParseException {
                                    String tmp1,tmp="";Token tmp2;
    tmp1 = InstanceOfExpression();
    if (jj_2_29(3)) {
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 110:
          tmp2 = jj_consume_token(110);
          break;
        case 111:
          tmp2 = jj_consume_token(111);
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                tmp+=tmp2.toString();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 110:
        case 111:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_10;
        }
      }
    } else {
      ;
    }
      {if (true) return "%exp1% %exp2%".replace("%exp1%",tmp1).replace("%exp2%",tmp).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String InstanceOfExpression() throws ParseException {
                                 String tmp1,tmp2="";Token t=null;
    tmp1 = PostfixExpression();
    if (jj_2_30(2)) {
      t = jj_consume_token(INSTANCEOF);
      tmp2 = Expression();
    } else {
      ;
    }
      {if (true) return "%exp1% %exp2% %exp3%".replace("%exp1%",tmp1).replace("%exp2%",t!=null?t.toString():"").replace("%exp3%",tmp2).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String PostfixExpression() throws ParseException {
                              String tmp1,tmp2="",tmp3=null, tmp4;Token t;
    tmp1 = PrimaryExpression();
    label_11:
    while (true) {
      if (jj_2_31(3)) {
        ;
      } else {
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 70:
        jj_consume_token(70);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 105:
          tmp3 = Argumentos();
          break;
        default:
          jj_la1[35] = jj_gen;
          ;
        }
        jj_consume_token(71);
                                           tmp4="(%r%)";
        break;
      case 105:
        jj_consume_token(105);
        tmp3 = PostfixExpression();
                                           tmp4="->%r%";
        break;
      case 112:
        jj_consume_token(112);
        tmp3 = PostfixExpression();
                                            tmp4="::%r%";
        break;
      case 113:
        jj_consume_token(113);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case NEW:
        case IDENTIFIER:
        case 69:
        case 70:
        case 92:
        case 104:
        case 105:
        case 109:
        case 110:
        case 111:
          tmp3 = Expression();
          break;
        default:
          jj_la1[36] = jj_gen;
          ;
        }
        jj_consume_token(114);
                                           tmp4="[%r%]";
        break;
      case 67:
        jj_consume_token(67);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case NEW:
        case IDENTIFIER:
        case 69:
        case 70:
        case 92:
        case 104:
        case 105:
        case 109:
        case 110:
        case 111:
          tmp3 = Expression();
          break;
        default:
          jj_la1[37] = jj_gen;
          ;
        }
        jj_consume_token(68);
                                           tmp4="{%r%}";
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                if(tmp3!=null){
                    tmp2+=tmp4.replace("%r%",tmp3);
                    tmp3=null;
                }else{
                    tmp2+=tmp4.replace("%r%","");
                }
    }
  {if (true) return "%exp1%%exp2%".replace("%exp1%",tmp1).replace("%exp2%",tmp2).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String PrimaryExpression() throws ParseException {
                              String tmp="";Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 105:
      tmp = Constant();
      break;
    case 70:
      jj_consume_token(70);
      tmp = Expression();
      jj_consume_token(71);
                              tmp = "("+tmp+")";
      break;
    case NEW:
      jj_consume_token(NEW);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(70);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE:
      case FLOAT:
      case LONG:
      case CHAR:
      case INT:
      case IDENTIFIER:
        tmp = Parametros();
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      jj_consume_token(71);
                                                    tmp = "new %class%(%params%)".replace("%class%",t.toString()).replace("%params%",tmp);
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
 {if (true) return tmp.trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String Constant() throws ParseException {
                     Token t,t2 = null;String retorno="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                                retorno = t.toString();
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                                                                                        retorno = t.toString();
      break;
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      retorno = String();
      break;
    case IDENTIFIER:
    case 105:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 105:
        t2 = jj_consume_token(105);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      t = jj_consume_token(IDENTIFIER);
                                                                                                                                                                  retorno =(t2!=null?"this->":"")+t.toString();
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return retorno.trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String String() throws ParseException {
                   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
      break;
    case CHARACTER_LITERAL:
      t = jj_consume_token(CHARACTER_LITERAL);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
 {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  static final public String Variable() throws ParseException {
                     Token t;
    t = jj_consume_token(IDENTIFIER);
          {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  static final public String Argumentos() throws ParseException {
                       String tmp="", tmp2;
    tmp = Constant();
    label_12:
    while (true) {
      if (jj_2_32(2)) {
        ;
      } else {
        break label_12;
      }
      jj_consume_token(66);
      tmp2 = Constant();
                                                         tmp+= ", "+tmp2;
    }
     {if (true) return tmp;}
    throw new Error("Missing return statement in function");
  }

  static final public String Parametros() throws ParseException {
                       String retorno, tmp;
    retorno = Parametro();
    label_13:
    while (true) {
      if (jj_2_33(2)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(66);
      tmp = Parametros();
          retorno += ", " + tmp;
    }
          {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public String Parametro() throws ParseException {
                      Token t;String retorno,tipo;
    tipo = Type();
          retorno = tipo;
    t = jj_consume_token(IDENTIFIER);
          retorno += " "+t.toString();
          {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public void attributos() throws ParseException {
                   Token t = null,t1;String tmp ="",tmp2 = "";Attribute a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VISIBILITY:
      t = jj_consume_token(VISIBILITY);
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    tmp = Type();
      a = classes.get().addAttribute(tmp,t != null? t.toString() :""); tmp="";
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 73:
      jj_consume_token(73);
      tmp = Expression();
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
     a.addVariable(t.toString() + (tmp.equals("")? "":" = " + tmp) ); tmp = "";
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 66:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_14;
      }
      jj_consume_token(66);
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 73:
        jj_consume_token(73);
        tmp = Expression();
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
             a.addVariable(t.toString() + (tmp.equals("")? "":" = " + tmp)  ); tmp = "";
    }
    jj_consume_token(72);
  }

  static final public String Type() throws ParseException {
               String s; Token t1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE:
    case FLOAT:
    case LONG:
    case CHAR:
    case INT:
      s = TypeSpecifier();
      break;
    case IDENTIFIER:
      t1 = jj_consume_token(IDENTIFIER);
                                            s = t1.toString()+" *";
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String TypeSpecifier() throws ParseException {
                        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
      t = jj_consume_token(LONG);
      break;
    case INT:
      t = jj_consume_token(INT);
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(70)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(71)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(70)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(71)) return true;
    if (jj_scan_token(72)) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(70)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(71)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(70)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(71)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(ELSEIF)) return true;
    if (jj_scan_token(70)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(71)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(70)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(71)) return true;
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(73)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_scan_token(DELETE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    if (jj_scan_token(72)) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(72)) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(105)) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_19()) return true;
    if (jj_scan_token(73)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(72)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_21()) return true;
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(72)) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) jj_scanpos = xsp;
    if (jj_scan_token(72)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(72)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(67)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(68)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(73)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(70)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(71)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(70)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(71)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(66)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(72)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(70)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(71)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    return false;
  }

  static private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) return true;
    }
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(70)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    return false;
  }

  static private boolean jj_3_29() {
    Token xsp;
    if (jj_3R_36()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(70)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(71)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(67)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(113)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) jj_scanpos = xsp;
    if (jj_scan_token(114)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(112)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(105)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(70)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    return false;
  }

  static private boolean jj_3_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_3R_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) return true;
    }
    }
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_3R_89()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) return true;
    }
    }
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) return true;
    }
    return false;
  }

  static private boolean jj_3R_77() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_scan_token(70)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(71)) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_76()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    }
    }
    }
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(70)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(71)) return true;
    return false;
  }

  static private boolean jj_3_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) return true;
    }
    }
    }
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(92)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(91)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(90)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(88)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_32()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(86)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(87)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_30()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_25()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_28()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_64()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_scan_token(73)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GuruCParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[50];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x4000000,0x0,0x0,0x4000000,0x0,0x4000000,0x0,0x4000000,0x341d1000,0xd1000,0x0,0x0,0x0,0x20000000,0x10100000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd1000,0xd1000,0xd1000,0x0,0x4000000,0xd1000,0x0,0xd1000,0xc0000,0x0,0x0,0x0,0x0,0x4000000,0x4000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x80000000,0x0,0x20000000,0x0,0x10000000,0xc1220040,0x0,0xc1220040,0x40000000,0x0,0xc1220040,0x40000000,0x81220040,0x40000000,0x81220040,0x8fa20144,0x82000000,0x0,0x0,0x0,0x0,0x8c800104,0x100,0x8800004,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x82000000,0x82000000,0x0,0x81220040,0x82000000,0x0,0x80000000,0x0,0x40000000,0x0,0x0,0x0,0x81220040,0x1220040,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x4,0x0,0x4,0x0,0x68,0x20,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x10000060,0x10000060,0x200,0x200,0x400,0x0,0x0,0x0,0x0,0x3ffa00,0xe0000000,0x0,0x0,0x0,0x0,0x10000020,0x10000020,0x0,0x0,0x0,0x0,0x10000060,0x10000060,0x48,0x0,0x40,0x0,0x0,0x0,0x0,0x200,0x4,0x200,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe300,0xe300,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1e,0x60,0x380,0x1c00,0x2100,0x2100,0xc000,0xc000,0xc000,0x200,0xe300,0xe300,0x30200,0x0,0x200,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[33];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public GuruCParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GuruCParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GuruCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public GuruCParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GuruCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public GuruCParser(GuruCParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GuruCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[115];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 50; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 115; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 33; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
